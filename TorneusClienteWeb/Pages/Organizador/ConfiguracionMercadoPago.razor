@page "/ORGANIZADOR/Mercadopago"
@layout LayoutVacio
@inject IConfiguration _config
@inject NavigationManager _nav
@inject MedioPagoServicio _servicioMedioPago
@inject UsuarioServicio _servicioUsuario
@inject ILocalStorageService _localStorage
@using System.Threading;

<div class="d-flex justify-content-center align-items-center" style="height:80vh;width:100%">
        <h3 style="color:red">@mensaje</h3>
</div>


@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string code { get; set; }

    private string mensaje ="";

    protected async override Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(code))
        {
            await AsignarVendedorMakertPlace();
        }
    }



    private async Task AsignarVendedorMakertPlace()
    {
        try
        {
            var usuarioLogueado = await _localStorage.GetItemAsync<UsuarioLogueado>(Util.TOKEN_LOCAL);

            _servicioUsuario.ActualizarUsuarioLogueado(usuarioLogueado);

            bool tokenVendedorGuardado = await _servicioMedioPago.ImplementarMercadoPagoVendedor(code, usuarioLogueado.Id, usuarioLogueado.Token);

            if (tokenVendedorGuardado)
            {
                mensaje = "Mercadopago integrado correctamente. Redireccionando...";
                await _localStorage.RemoveItemAsync($"{Util.HABILITACION_MARKETPLACE}-{usuarioLogueado.Id}");
            }
            else
            {
                mensaje = "Hubo un error";
            }
            Thread.Sleep(3000);
            NavegarPrincipal();
        }
        catch (Exception ex)
        {

            mensaje = ex.Message;
        }
    }

    private void NavegarPrincipal()
    {
        _nav.NavigateTo("/", true);
    }


}
