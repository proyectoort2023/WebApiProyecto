@page "/EQUIPO/PanelPago"
@using MercadoPago.Client.Payment;
@using MercadoPago.Client.Preference;
@using MercadoPago.Config;
@using MercadoPago.Resource.Payment;
@using MercadoPago.Resource.Preference;
@inject NavigationManager _nav
@inject ServicioMenu _servicioMenu
@inject InscripcionServicio _servicioInscripcion
@inject MedioPagoServicio _servicioMedioPago
@inject TorneoServicio _servicioTorneo
@inject ISnackbar _snackbar
@inject IConfiguration _configuration
@inject ILocalStorageService _localStorage



<div class="d-flex justify-content-center align-items-center flex-column" style="height:70vh">
    <h2 class="h2-panelpago"> Monto a pagar $@_servicioInscripcion.ObtenerInscripcionActual().Monto</h2>

    @if (!string.IsNullOrEmpty(accTokenVendedor))
    {
        <MudButton>
            <img src="/imagenes/mercadopago-logo.png" alt="" class="card-general" @onclick="LanzarCheckouMercadopago" />
        </MudButton>
    }

    <MudButton>
        <img src="/imagenes/pago-efectivo-logo5.png" alt="" class="card-general" @onclick="ActualizarEstadoEfectivo" />
    </MudButton>
</div>




@code {

    //[Parameter]
    //[SupplyParameterFromQuery]
    //public int usuarioVendedorId { get; set; }


    private string accTokenVendedor = "";

    protected async override Task OnInitializedAsync()
    {
        _servicioMenu.ActualizarNavegacionPOP(true, false, "/EQUIPO/Gestiones");
        _servicioMenu.ActualizarTitulo("Panel de pago");
        int usuarioVendedorId = _servicioTorneo.ObtenerTorneoActual().Usuario.Id;
        accTokenVendedor = await _servicioMedioPago.ObtenerAccessTokenMPVendedor(usuarioVendedorId);
    }

    private async Task ActualizarEstadoEfectivo()
    {
        try
        {
            string estado = Util.EstadoPago.PENDIENTE.ToString();
            bool resultado = await _servicioInscripcion.ActualizarMedioPagoEfectivo(estado);
            if (!resultado) throw new Exception("No se ha podido actualizar el estado de intención de pago en efectivo en local");

            _snackbar.Add("Se ha actualizado correctamente. Recuerde que debe  abonar en efectivo en el local de encuentro", Severity.Success);
            NavegarInicioURl();
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }
    }

    private async Task LanzarCheckouMercadopago()
    {
        string baseURL = "";
        try
        {
            var torneoActual = _servicioTorneo.ObtenerTorneoActual();

            MercadoPagoConfig.AccessToken = accTokenVendedor;

        #if DEBUG
              baseURL = $"{_configuration["Url_Back_MercadoPago:LocalRedirect_MP"]}EQUIPO/NotificacionMercadoPago/?resultadoMp=";
        #else
               baseURL = $"{_configuration["Url_Back_MercadoPago:ProduccionRedirect_MP"]}EQUIPO/NotificacionMercadoPago/?resultadoMp=";
        #endif

             var request = new PreferenceRequest
                {
                    Items = new List<PreferenceItemRequest>
                    {
                        new PreferenceItemRequest
                        {
                            Title = torneoActual.Nombre,
                            Quantity = 1,
                            CurrencyId = "UYU",
                            UnitPrice = (decimal)_servicioInscripcion.ObtenerInscripcionActual().Monto,
                            Description = $"Inscripcion a {torneoActual.Nombre}"
                        },
                    },
                    BackUrls = new PreferenceBackUrlsRequest()
                    {
                        Failure = $"{baseURL}{Util.EstadoPago.RECHAZADO.ToString()}",
                        Pending = $"{baseURL}{Util.EstadoPago.PENDIENTE.ToString()}",
                        Success = $"{baseURL}{Util.EstadoPago.PAGADO.ToString()}"
                    },
                    AutoReturn = "approved"
                };


            // Crea la preferencia usando el client
            var client = new PreferenceClient();
            Preference preference = await client.CreateAsync(request);

            string idPreferencia = preference.Id;  //para identificar el pago en el backend
            string url = preference.InitPoint;

            PreferenciaMercadopagoDTO prefMP = new(_servicioInscripcion.ObtenerInscripcionActual().Id, idPreferencia,"");

            await _localStorage.SetItemAsync(Utilidades.Util.MERCADOPAGO_CONST.ToString(), prefMP);  //se guarda para recuperar en la redirección de mercadopago

            _nav.NavigateTo(url);
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }

    }

    private void NavegarInicioURl()
    {
        _nav.NavigateTo("/");
    }





}
