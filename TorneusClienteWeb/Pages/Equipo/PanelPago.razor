@page "/EQUIPO/PanelPago"
@using MercadoPago.Client.Payment;
@using MercadoPago.Client.Preference;
@using MercadoPago.Config;
@using MercadoPago.Resource.Payment;
@using MercadoPago.Resource.Preference;
@inject NavigationManager _nav
@inject ServicioMenu _servicioMenu
@inject InscripcionServicio _servicioInscripcion
@inject TorneoServicio _servicioTorneo
@inject ISnackbar _snackbar
@inject IConfiguration _configuration
@inject ILocalStorageService _localStorage


<MudButton>
    <img src="/imagenes/mercadopago-logo.png" alt="" class="card-general" />
</MudButton>

<MudButton>
    <img src="/imagenes/pago-efectivo-logo5.png" alt="" class="card-general"/>
</MudButton>



@code {
    protected async override Task OnInitializedAsync()
    {
        _servicioMenu.ActualizarNavegacionPOP(true, false, "/EQUIPO/Gestiones");
        _servicioMenu.ActualizarTitulo("Panel de pago");
    }

    private async Task ActualizarEstadoEfectivo()
    {
        try
        {
            string estado = Util.EstadoPago.PENDIENTE.ToString();

            bool resultado = await _servicioInscripcion.ActualizarMedioPagoEfectivo(estado);
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }
    }

    private async Task LanzarCheckouMercadopago()
    {

        try
        {
            var torneoActual = _servicioTorneo.ObtenerTorneoActual();


            MercadoPagoConfig.AccessToken = _configuration[Util.ACCESSKEY];

            var request = new PreferenceRequest
                {
                    Items = new List<PreferenceItemRequest>
                    {
                        new PreferenceItemRequest
                        {
                            Title = torneoActual.Nombre,
                            Quantity = 1,
                            CurrencyId = "UYU",
                            UnitPrice = (decimal)_servicioInscripcion.ObtenerInscripcionActual().Monto,
                            Description = $"Inscripcion a {torneoActual.Nombre}"
                        },
                    },
                    BackUrls = new PreferenceBackUrlsRequest()
                    {
                        Failure = $"https://torneus.azurewebsites.net/EQUIPO/NotifcaciónMercadoPago/?resultadoMp={Util.EstadoPago.RECHAZADO.ToString()}",
                        Pending = $"https://torneus.azurewebsites.net/EQUIPO/NotifcaciónMercadoPago/?resultadoMp={Util.EstadoPago.PENDIENTE.ToString()}",
                        Success = $"https://torneus.azurewebsites.net/EQUIPO/NotifcaciónMercadoPago/?resultadoMp={Util.EstadoPago.PAGADO.ToString()}"
                    },
                    AutoReturn = "approved"
                };


            // Crea la preferencia usando el client
            var client = new PreferenceClient();
            Preference preference = await client.CreateAsync(request);

            string idPreferencia = preference.Id;  //para identificar el pago en el backend
            string url = preference.InitPoint;

            PreferenciaMercadopagoDTO prefMP = new(_servicioInscripcion.ObtenerInscripcionActual().Id, idPreferencia);

            await _localStorage.SetItemAsync(Utilidades.Util.MERCADOPAGO_CONST.ToString(), prefMP);  //se guarda para recuperar en la redirección de mercadopago
            
            _nav.NavigateTo(url);
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }
       
    }





}
