@page "/EQUIPOS/Creacion"
@inject NavigationManager _nav
@inject ISnackbar _snackbar
@inject EquipoServicio _servicioEquipo
@inject ServicioMenu _servicioMenu
@inject JugadorServicio _servicioJugador
@inject IMapper _autoMapper
@inject IDialogService _dialogService



<VistaLogoEquipo ModoEdicion="true" NombreImagenLogo="@Equipo.Logo" SubirImagen="ActualizarImagen" />


 <EditForm Model="@Equipo" OnValidSubmit="Registrar">
        <DataAnnotationsValidator />

    <div class="card-general">
        <MudTextField @bind-Value="Equipo.Nombre"
                      Label="Nombre del equipo"
                      Variant="Variant.Outlined"
                      Margin="Margin.Dense"
                      For="@(() => Equipo.Nombre)" />

        <EspacioVertical Altura="@espaciado" />


        <MudTextField @bind-Value="Equipo.Abreviatura"
                      Label="Abreviatura del equipo"
                      Variant="Variant.Outlined"
                      Margin="Margin.Dense"
                      For="@(() => Equipo.Abreviatura)" />

        <EspacioVertical Altura="@espaciado" />
    </div>


    @if (Equipo.Jugadores.Count < 13)
    {
        <div class="card-general color-violet">
            <h5>Jugador</h5>
            <MudTextField @bind-Value="JugadorNuevo.Cedula"
                          TextChanged="onChangedTextCedula"
                          Label="Cedula"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense" />

            <EspacioVertical Altura="15px" />

            <MudTextField @bind-Value="JugadorNuevo.NombreCompleto"
                          Label="Nombre del jugador"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Disabled="@disableEdicioNuevoJugador" />

            <EspacioVertical Altura="15px" />

            <MudDatePicker Label="Fecha de Nacimiento"
                           TitleDateFormat="dd/MM/yyyy"
            @bind-Date="fechaNacimiento"
                           Validation="ValidarFecha"
                           Disabled="@disableEdicioNuevoJugador" />

            <EspacioVertical Altura="10px" />

            <div class="d-flex justify-content-center">
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Primary"
                           OnClick="AgregarCrearJugador">Agregar al equipo</MudButton>
            </div>
           
        </div>
    }



       <EspacioVertical Altura="30px" />



         
        @if (Equipo.Jugadores.Count > 0)
        {
        <div class="card-general card-general-transparente">
            <table class="tabla-equipo">
                <tr>
                    <th style="width:10%"></th>
                    <th style="width:20%">Cedula</th>
                    <th style="width:60%">Nombre</th>
                    <th style="width:10%">Edad</th>
                    <th></th>
                </tr>
                @foreach (var jug in Equipo.Jugadores)
                {
                    <tr>
                        <td><i class="far fa-hand-pointer color-verde" @onclick="() => AsignarCapitan(jug.NombreCompleto)"></i></td>
                        <td>@jug.Cedula</td>
                        <td>@jug.NombreCompleto</td>
                        <td>@CalcularEdad(jug.FechaNacimiento)</td>
                        <td><i class="far fa-trash-alt color-rojo" @onclick="() => EliminarJugadorEquipo(jug.Id)"></i></td>
                    </tr>
                }
            </table>

             <EspacioVertical Altura="30px" />

            <p>Capitan: @Equipo.Capitan</p>
        </div>
        }
        else
        {
            <p>No tiene ningun jugador en el equipo</p>
        }

     
     
          <EspacioVertical Altura="20px" />

            <div class="d-flex justify-content-center">
                    <MudButton Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    ButtonType="ButtonType.Submit"
                    Disabled="@disableBotonRegistrar">Crear equipo</MudButton>
            </div>

        </EditForm>



@code {

    private EquipoCreacionDTO Equipo = new();
    private List<JugadorDTO> Jugadores = new();
    private JugadorDTO JugadorNuevo = new();

    bool disableEdicioNuevoJugador = false;
    bool disableBotonRegistrar = true;


    DateTime? fechaNacimiento = DateTime.Today.Date.AddYears(-13);

    private string espaciado = "10px";

    protected async override Task OnInitializedAsync()
    {

        _servicioMenu.ActualizarNavegacionPOP(true, false, "/EQUIPO/AdminEquipos");
        _servicioMenu.ActualizarTitulo("Registro de equipo");

        Jugadores = await _servicioJugador.ObtenerJugadoresTodos();
    }

    private async Task ActualizarImagen(ImagenDTO tipoImagenUrl)
    {
        Equipo.Logo = tipoImagenUrl.UrlImagen;
        //StateHasChanged();
    }

    private void LimpiarCasillasJugadores()
    {
        fechaNacimiento = DateTime.Today.Date.AddYears(-13);
        JugadorNuevo = new JugadorDTO(){
          Id =0,
          Cedula="",
          FechaNacimiento = fechaNacimiento.Value,
          NombreCompleto=""
        };
    }

    private async Task Registrar()
    {
        try
        {
            EquipoDTO equipoDTO = _autoMapper.Map<EquipoCreacionDTO, EquipoDTO>(Equipo);
            await _servicioEquipo.RegistrarEquipo(equipoDTO);

            _nav.NavigateTo("/EQUIPO/AdminEquipos");
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }

    }

    private string ValidarFecha(DateTime? fecha)
    {
        if (fecha == null) return "La fecha es requerida.";

        if (fecha > DateTime.Today.Date.AddYears(-13)) return "El jugador debe ser mayor de 12";

        return string.Empty; // La fecha es válida
    }

    private async Task AgregarCrearJugador()
    {
        try
        {
            if (!ValidadorCedula.Validar(JugadorNuevo.Cedula))
            {
                _snackbar.Add("La cedula no es válida", Severity.Warning);
                return;
            }
            if (Equipo.Jugadores.Any(a => a.Cedula == JugadorNuevo.Cedula))
            {
                _snackbar.Add("El jugador ya está en tu equipo", Severity.Warning);
                return;
            }
            if (JugadorNuevo.Id == 0)
            {
                JugadorNuevo.FechaNacimiento = fechaNacimiento.Value.Date;
                JugadorNuevo.Id = await _servicioJugador.RegistrarJugador(JugadorNuevo);
                Jugadores.Add(JugadorNuevo);
            }

            Equipo.Jugadores.Add(JugadorNuevo);

            if (Equipo.Jugadores.Count >= 6) disableBotonRegistrar = false;

            HabilitarCamposRegistroJugador();
            _snackbar.Add("Jugador agregado al equipo", Severity.Success);
            LimpiarCasillasJugadores();
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }
    }

    private int CalcularEdad(DateTime fechaNacimientoJugador)
    {
        return DateTime.Today.Date.Year - fechaNacimientoJugador.Year;
    }



    private void onChangedTextCedula(string texto)
    { 

        if (texto.Length < 6) return;

        if (!ValidadorCedula.Validar(texto)) return;

        var jugadorBuscado = BuscarJugadorPorCedula(texto);
        if (jugadorBuscado == null) {
            HabilitarCamposRegistroJugador();
            return;
        };

        JugadorNuevo.Id = jugadorBuscado.Id;
        JugadorNuevo.Cedula = jugadorBuscado.Cedula;
        JugadorNuevo.NombreCompleto = jugadorBuscado.NombreCompleto;
        JugadorNuevo.FechaNacimiento = jugadorBuscado.FechaNacimiento;

        DeshabilitarCamposRegistroJugador();
    }

    private JugadorDTO BuscarJugadorPorCedula(string cedula)
    {
        return Jugadores.SingleOrDefault(s => s.Cedula == cedula);
    }

    private void AsignarCapitan(string capitan)
    {
        Equipo.Capitan = capitan;
    }

    private async Task EliminarJugadorEquipo(int idJugador)
    {
        string nombreJugador = Equipo.Jugadores.SingleOrDefault(s => s.Id == idJugador).NombreCompleto;
        var parametros = new DialogParameters();
        parametros.Add(nameof(DialogComponent.Mensaje), $"Sacar jugador del equipo");

        var result = await _dialogService.Show<DialogComponent>($"Desea sacar a {nombreJugador} del equipo?", parametros).Result;

        if (result.Canceled) return;


       
        Equipo.Jugadores.RemoveAll(rem => rem.Id == idJugador);
        int cantidadJugadores = Equipo.Jugadores.Count;

        if (cantidadJugadores < 6) disableBotonRegistrar = true;

        if (nombreJugador == Equipo.Capitan) Equipo.Capitan = "";
    }

    private void HabilitarCamposRegistroJugador()
    {
        disableEdicioNuevoJugador = false;
    }

    private void DeshabilitarCamposRegistroJugador()
    {
        disableEdicioNuevoJugador = true;
    }



}
