@page "/VistaNotificaciones"
@inject NotificacionServicio _servicioNotificaciones
@inject UsuarioServicio _servicioUsuario
@inject HubConnection _hubConnection
@inject ServicioMenu _servicioMenu


@if (Notificaciones != null)
{
<<<<<<< HEAD
    if(Notificaciones.Count > 0)
    {
        @foreach(var notificacion in Notificaciones)
=======
    if (Notificaciones.Count > 0)
    {
        @foreach (var notificacion in Notificaciones)
>>>>>>> dev: front notificacion estructura
        {
            <ItemNotificacion Notificacion="notificacion" />
        }
    }
    else
    {
        <h3>No tiene notificaciones recibidas aun.</h3>
    }
}
else
{
    <Cargando />
}


@code {
    List<NotificacionDTO> Notificaciones;

    protected async override Task OnInitializedAsync()
    {

        await Actualizar();

        _hubConnection.On<NotificacionDTO>("RecibirMensajesNotificaciones", async (notificacion) =>
       {
<<<<<<< HEAD
       if (notificacion.General || notificacion.Equipo.Usuario.Id == _servicioUsuario.ObtenerUsuarioLogueado().Id)
       {
               await _servicioNotificaciones.SetNotificacion(notificacion);
               _servicioMenu.NuevaNotificacionIcono();
=======
           if (notificacion.General || notificacion.Equipo.Usuario.Id == _servicioUsuario.ObtenerUsuarioLogueado().Id)
           {
               await _servicioNotificaciones.SetNotificacion(notificacion);
>>>>>>> dev: front notificacion estructura
               await Actualizar();
               StateHasChanged();
           }
       });

    }

    private async Task Actualizar()
    {
<<<<<<< HEAD
        Notificaciones = await _servicioNotificaciones.ObtenerNotificaciones(_servicioUsuario.ObtenerUsuarioLogueado().Id);
=======
        Notificaciones = await _servicioNotificaciones.ObtenerNotificaciones(_servicioUsuario.ObtenerUsuarioLogueado());
>>>>>>> dev: front notificacion estructura
    }
}
