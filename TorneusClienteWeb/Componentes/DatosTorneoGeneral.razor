@inject UsuarioServicio _servicioUsuario
@inject TorneoServicio _servicioTorneo
@inject ServicioMenu _servicioMenu
@inject NotificacionesSignalRService _servicioNotificacionesSignalR
@inject ISnackbar _snackbar
@inject IDialogService _dialogService
@inject HubConnection _hubConnection
@inject NavigationManager _nav
@inject EquipoServicio _servicioEquipo
@inject InscripcionServicio _servicioInscripcion

@if (TorneoSeleccionadoDTO != null)
{

    <PortadaVistaTorneo NombreImagenBanner="@TorneoSeleccionadoDTO.Banner"
                        NombreImagenLogo="@TorneoSeleccionadoDTO.Logo"
                        NombreTorneo="@TorneoSeleccionadoDTO.Nombre" />

    @if (_servicioUsuario.ObtenerUsuarioLogueado().Rol == Util.Roles.ORGANIZADOR.ToString())
    {
        <div class="card-iconos-padding">
            <MudIcon Icon=@Icons.Material.Filled.AutoDelete Title="Suspender" Size="Size.Large" Color="Color.Warning" @onclick="SuspenderTorneo"/>
            <MudIcon Icon=@Icons.Material.Filled.EditNote Title="Habilitar" Size="Size.Large" Color="Color.Dark" @onclick="EditarTorneo"/>
            <InscripcionIconAction HabilitacionInscripcion="HabilitacionInscripcion" HabilitadoValue="TorneoSeleccionadoDTO.HabilitacionInscripcion" />
            <MudIcon Icon=@Icons.Material.Filled.DeleteForever Title="Eliminar" Size="Size.Large" Color="Color.Error" @onclick="EliminarTorneo" />
        </div>
    }
    @if (ValidarInscripcion())
    {
        <div class="d-flex justify-content-center align-items-center" @onclick="Inscribirme">
            <MudIcon Icon=@Icons.Material.Filled.AutoDelete Title="Suspender" Size="Size.Large" Color="Color.Warning" />
            <span class="m-1 animacionInscripcion">Inscribirme</span>
        </div>
      
    }

    <BotonAnimado Texto="Fixture" Icono="@Util.IconoEstrella" OnClick="VerFixture" />

    <JornadaVista Fecha="@TorneoSeleccionadoDTO.Fecha" 
                  HoraComienzo="@TorneoSeleccionadoDTO.HoraComienzo"
                  NombreContacto="@TorneoSeleccionadoDTO.NombreContacto"
                  TelContacto="@TorneoSeleccionadoDTO.TelContacto" />
    
    <PrecioVista Precio="@TorneoSeleccionadoDTO.Precio" TipoPrecio="@TorneoSeleccionadoDTO.TipoPrecio" />

    <PuntajeVista ConfiguracionEquipos="@TorneoSeleccionadoDTO.ConfiguracionEquipos"
                  PuntajeMax="@TorneoSeleccionadoDTO.PuntajeMax"
                  PuntajeMaxUltimoSet="@TorneoSeleccionadoDTO.PuntajeMaxUltimoSet"
                  SetsMax="@TorneoSeleccionadoDTO.SetsMax" />

    <DetalleTorneoVista CantidadCanchas="@TorneoSeleccionadoDTO.CantidadCanchas"
                        MaxEquiposInscriptos="@TorneoSeleccionadoDTO.MaxEquiposInscriptos"
                        MaxJugadoresPorEquipo="@TorneoSeleccionadoDTO.MaxJugadoresPorEquipo"
                        Otros="@TorneoSeleccionadoDTO.Otros" />

}


@code {
    [Parameter] public TorneoDTO TorneoSeleccionadoDTO { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await RecibidoresNotificacones();
    }

     private async Task RecibidoresNotificacones()
    {
        _hubConnection.On<int, bool>("RecibidorAperturaCierreTorneo", async (torneoId, apertura) =>
        {
                _servicioNotificacionesSignalR.AbrirCerrarInscripciones(torneoId, apertura);
                StateHasChanged();
        });

    }

    private async Task SuspenderTorneo()
    {
        try
        {
            var parametros = new DialogParameters();
            parametros.Add(nameof(DialogComponent.Mensaje),"Desea suspender el torneo?");

            var result = await _dialogService.Show<DialogComponent>("Suspender", parametros).Result;

            if (!result.Canceled)
            {
                bool suspendido = await _servicioTorneo.SuspenderTorneo(TorneoSeleccionadoDTO.Id);
                if (suspendido){
                    _snackbar.Add("Se ha suspendido el torneo", Severity.Success);
                    IrAtras();
                }
                else
                {
                    _snackbar.Add("No se ha podido suspender el torneo", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }


    }

    void IrAtras() => _nav.NavigateTo("/ORGANIZADOR/Principal");

    private async Task HabilitacionInscripcion(bool hab)
    {
        try
        {
            string pregunta = hab ? "cerrar" : "abir";
            string tituloModal = hab ? "Cierre" : "Apertura";

            var parametros = new DialogParameters();
            parametros.Add(nameof(DialogComponent.Mensaje), $"Desea {pregunta} las inscripciones para los equipos?");

            var result = await _dialogService.Show<DialogComponent>($"{tituloModal} de inscripciones", parametros).Result;

            if (!result.Canceled)
            {
                if (!hab)
                {
                    //Habilita inscripcion
                    bool resultado = await _servicioTorneo.AbrirInscripcionesTorneoOrganizador(TorneoSeleccionadoDTO);
                    if (resultado) _snackbar.Add("Inscripciones abiertas", Severity.Success);
                    else _snackbar.Add("No se ha podido abrir la inscripcion", Severity.Warning);
                }
                else
                {
                    //Cierra inscripcion
                    bool resultado = await _servicioTorneo.CerrarInscripcionesTorneoOrganizador(TorneoSeleccionadoDTO);
                    if (resultado) _snackbar.Add("Inscripciones cerradas", Severity.Success);
                    else _snackbar.Add("No se ha podido cerrar la inscripcion", Severity.Warning);
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }
    }

    private async Task EliminarTorneo()
    {
        try
        {
            var parametros = new DialogParameters();
            parametros.Add(nameof(DialogComponent.Mensaje),"Desea eliminar el torneo?");

            var result = await _dialogService.Show<DialogComponent>("Eliminar", parametros).Result;

            if (!result.Canceled)
            {
                bool resultado = await _servicioTorneo.EliminarTorneo(TorneoSeleccionadoDTO.Id);
                if (resultado)
                {
                    await _hubConnection.SendAsync("EnviarNotificacionEliminacionTorneo", TorneoSeleccionadoDTO.Id);
                    _snackbar.Add("Se ha eliminado el torneo", Severity.Success);
                    IrAtras();
                }
                else
                {
                    _snackbar.Add("No se ha podido eliminar el torneo", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }
    }

    private void VerFixture()
    {

    }


    private void EditarTorneo() => _nav.NavigateTo("/ORGANIZADOR/EdicionTorneo");

    private bool ValidarInscripcion() => _servicioUsuario.ObtenerUsuarioLogueado().Rol == Util.Roles.EQUIPO.ToString()
                                                        && TorneoSeleccionadoDTO.Cerrrado == false
                                                        && TorneoSeleccionadoDTO.Suspendido == false
                                                        && TorneoSeleccionadoDTO.HabilitacionInscripcion == true;

    private async Task Inscribirme()
    {

        try
        {
            int equipoId = 0;
            double precio =  _servicioTorneo.ObtenerTorneoActual().Precio;
            string tipoPrecio = _servicioTorneo.ObtenerTorneoActual().TipoPrecio;

            var listaEquipos = await _servicioEquipo.ObtenerEquiposPorAdministrador();

            if (listaEquipos.Count > 0)
            {
                var result = await _dialogService.Show<SelectorEquipoModal>($"Elección equipo participante").Result; //cuando tiene mas de un equipo debe seleccionar el que va a participar

                if (result.Canceled) return;

                equipoId = (int)result.Data;
            }
            else
            {
                _snackbar.Add("No tiene equipo/s creados para las inscripciones de torneos", Severity.Warning);
                return;
            }

            int cantidadJugadores = _servicioEquipo.CantidadJugadoresEquipo(equipoId);

            await _servicioInscripcion.AgregarInscripcionNueva(equipoId, precio, tipoPrecio, cantidadJugadores);

            _snackbar.Add("Se ha inscrripto su equipo correctamente", Severity.Success);

            _nav.NavigateTo("/EQUIPO/PanelPago");
        }
        catch (Exception ex)
        {

            _snackbar.Add(ex.Message, Severity.Warning);
        }

       
    }





}