@inject UsuarioServicio _servicioUsuario
@inject TorneoServicio _servicioTorneo
@inject ServicioMenu _servicioMenu
@inject ISnackbar _snackbar
@inject IDialogService _dialogService
@inject HubConnection _hubConnection
@inject NavigationManager _nav

@if (TorneoSeleccionadoDTO != null)
{

    <PortadaVistaTorneo NombreImagenBanner="@TorneoSeleccionadoDTO.Banner"
                        NombreImagenLogo="@TorneoSeleccionadoDTO.Logo"
                        NombreTorneo="@TorneoSeleccionadoDTO.Nombre" />

    @if (_servicioUsuario.ObtenerUsuarioLogueado().Rol == Util.Roles.ORGANIZADOR.ToString())
    {
        <div class="card-iconos-padding">
            <MudIcon Icon=@Icons.Material.Filled.AutoDelete Title="Suspender" Size="Size.Large" Color="Color.Warning" @onclick="SuspenderTorneo"/>
            <MudIcon Icon=@Icons.Material.Filled.EditNote Title="Habilitar" Size="Size.Large" Color="Color.Dark" @onclick="EditarTorneo"/>
            <InscripcionIconAction HabilitacionInscripcion="HabilitacionInscripcion" HabilitadoValue="TorneoSeleccionadoDTO.HabilitacionInscripcion" />
            <MudIcon Icon=@Icons.Material.Filled.DeleteForever Title="Eliminar" Size="Size.Large" Color="Color.Error" @onclick="EliminarTorneo" />
        </div>
    }

    <section class="card-general color-lila animated-gradient">
        <span>Fixture</span>
        <img src="/imagenes/flecha.png" alt="" class="flecha-small">
    </section>

    <JornadaVista Fecha="@TorneoSeleccionadoDTO.Fecha" 
                  HoraComienzo="@TorneoSeleccionadoDTO.HoraComienzo"
                  NombreContacto="@TorneoSeleccionadoDTO.NombreContacto"
                  TelContacto="@TorneoSeleccionadoDTO.TelContacto" />
    
    <PrecioVista Precio="@TorneoSeleccionadoDTO.Precio" TipoPrecio="@TorneoSeleccionadoDTO.TipoPrecio" />

    <PuntajeVista ConfiguracionEquipos="@TorneoSeleccionadoDTO.ConfiguracionEquipos"
                  PuntajeMax="@TorneoSeleccionadoDTO.PuntajeMax"
                  PuntajeMaxUltimoSet="@TorneoSeleccionadoDTO.PuntajeMaxUltimoSet"
                  SetsMax="@TorneoSeleccionadoDTO.SetsMax" />

    <DetalleTorneoVista CantidadCanchas="@TorneoSeleccionadoDTO.CantidadCanchas"
                        MaxEquiposInscriptos="@TorneoSeleccionadoDTO.MaxEquiposInscriptos"
                        MaxJugadoresPorEquipo="@TorneoSeleccionadoDTO.MaxJugadoresPorEquipo"
                        Otros="@TorneoSeleccionadoDTO.Otros" />

}


@code {
    [Parameter] public TorneoDTO TorneoSeleccionadoDTO { get; set; }

    protected async override Task OnInitializedAsync()
    {

    }

    private async Task SuspenderTorneo()
    {
        try
        {
            var parametros = new DialogParameters();
            parametros.Add(nameof(DialogComponent.Mensaje),"Desea suspender el torneo?");

            var result = await _dialogService.Show<DialogComponent>("Suspender", parametros).Result;

            if (!result.Canceled)
            {
                bool suspendido = await _servicioTorneo.SuspenderTorneo(TorneoSeleccionadoDTO.Id);
                if (suspendido){
                    _snackbar.Add("Se ha suspendido el torneo", Severity.Success);
                    IrAtras();
                }
                else
                {
                    _snackbar.Add("No se ha podido suspender el torneo", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }


    }

    void IrAtras() => _nav.NavigateTo("/ORGANIZADOR/Principal");

    private async Task HabilitacionInscripcion(bool hab)
    {
        try
        {
            if (!hab)
            {
                //aqui tengo que habilitar por medio del servicio
            }
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }
    }

    private async Task EliminarTorneo()
    {
        try
        {
            var parametros = new DialogParameters();
            parametros.Add(nameof(DialogComponent.Mensaje),"Desea eliminar el torneo?");

            var result = await _dialogService.Show<DialogComponent>("Eliminar", parametros).Result;

            if (!result.Canceled)
            {
                bool resultado = await _servicioTorneo.EliminarTorneo(TorneoSeleccionadoDTO.Id);
                if (resultado)
                {
                    await _hubConnection.SendAsync("EnviarNotificacionEliminacionTorneo", TorneoSeleccionadoDTO.Id);
                    _snackbar.Add("Se ha eliminado el torneo", Severity.Success);
                    IrAtras();
                }
                else
                {
                    _snackbar.Add("No se ha podido eliminar el torneo", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }
    }



    private void EditarTorneo() => _nav.NavigateTo("/ORGANIZADOR/EdicionTorneo");


}