@inject UsuarioServicio _servicioUsuario
@inject TorneoServicio _servicioTorneo
@inject ServicioMenu _servicioMenu
@inject ISnackbar _snackbar
@inject IDialogService _dialogService
@inject HubConnection _hubConnection
@inject NavigationManager _nav

@if (TorneoSeleccionadoDTO != null)
{


    <PortadaVistaTorneo NombreImagenBanner="@TorneoSeleccionadoDTO.Banner"
                        NombreImagenLogo="@TorneoSeleccionadoDTO.Logo"
                        NombreTorneo="@TorneoSeleccionadoDTO.Nombre" />

    @if (_servicioUsuario.ObtenerUsuarioLogueado().Rol == Util.Roles.ORGANIZADOR.ToString())
    {
        <div class="card-iconos-padding">
            <MudIcon Icon=@Icons.Material.Filled.AutoDelete Title="Suspender" Size="Size.Large" Color="Color.Warning" @onclick="SuspenderTorneo"/>
            <MudIcon Icon=@Icons.Material.Filled.DeleteForever Title="Eliminar" Size="Size.Large" Color="Color.Error" />
        </div>
    }

    <section class="card-general color-lila animated-gradient">
        <span>Fixture</span>
        <img src="/imagenes/flecha.png" alt="" class="flecha-small">
    </section>

    <section class="card-general">
        <div class="dosEnLinea">
            <span><Vinieta />Fecha: @TorneoSeleccionadoDTO.Fecha.ToString("dd/MM/yyyy")</span>
            <span><Vinieta />Hora comienzo: @TorneoSeleccionadoDTO.HoraComienzo.ToString("HH:mm")</span>
        </div>
    </section>

    <section class="card-general">
        <div class="dosEnLinea">
            <span><Vinieta />Contacto: @TorneoSeleccionadoDTO.NombreContacto</span>
            <span><Vinieta />Cel: @TorneoSeleccionadoDTO.TelContacto</span>
        </div>

            <p><Vinieta />Precio: @TorneoSeleccionadoDTO.Precio</p>
            <p><Vinieta />Tipo de precio: @tipoPrecioBuscado()</p>

    </section>

    <section class="card-general">

        <p><Vinieta /> Puntaje màximo por set: @TorneoSeleccionadoDTO.PuntajeMax</p>
        <p><Vinieta />Puntaje màx en ùltimo set: @TorneoSeleccionadoDTO.PuntajeMaxUltimoSet</p>

        <p><Vinieta />Puntaje màximo por set: @TorneoSeleccionadoDTO.PuntajeMax</p>
        <p><Vinieta />Puntaje màx en ùltimo set: @TorneoSeleccionadoDTO.PuntajeMaxUltimoSet</p>

        <p><Vinieta />Sets màximo: @TorneoSeleccionadoDTO.SetsMax</p>
        <p><Vinieta />Configuraciòn de equipos: @Util.ConfigEquiposDiccionario[TorneoSeleccionadoDTO.ConfiguracionEquipos]</p>

        <p><Vinieta />Lìmite de inscriptos: @TorneoSeleccionadoDTO.MaxEquiposInscriptos</p>
        <p><Vinieta />Limite jugadores por equipo: @TorneoSeleccionadoDTO.MaxJugadoresPorEquipo</p>
        <p><Vinieta />Canchas: @TorneoSeleccionadoDTO.CantidadCanchas</p>
        <p><Vinieta />Otros detalles: @TorneoSeleccionadoDTO.Otros</p>
    </section>




}


@code {
    [Parameter] public TorneoDTO TorneoSeleccionadoDTO { get; set; }

    protected async override Task OnInitializedAsync()
    {

    }


    private string tipoPrecioBuscado() => TorneoSeleccionadoDTO.TipoPrecio == "EQUIPO" ? "Precio por equipo" : "Precio por jugador";

    private async Task SuspenderTorneo()
    {
        try
        {
            var parametros = new DialogParameters();
            parametros.Add(nameof(DialogComponent.Mensaje),"Desea suspender el torneo?");

            var result = await _dialogService.Show<DialogComponent>("Suspender", parametros).Result;

            if (!result.Canceled)
            {
                bool suspendido = await _servicioTorneo.SuspenderTorneo(TorneoSeleccionadoDTO.Id);
                if (suspendido){
                    _snackbar.Add("Se ha suspendido el torneo", Severity.Success);
                }
                else
                {
                    _snackbar.Add("No se ha podido suspender el torneo", Severity.Warning);
                }
                await _hubConnection.SendAsync("EnviarNotificacionSuspensionTorneo", suspendido, TorneoSeleccionadoDTO.Id);
                IrAtras();
            }
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Warning);
        }

        void IrAtras() => _nav.NavigateTo("/ORGANIZADOR/Principal");
    }

    


}