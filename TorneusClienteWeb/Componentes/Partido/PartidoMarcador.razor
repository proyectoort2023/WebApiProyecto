@inject TorneoServicio _servicioTorneo
@inject FixtureServicio _servicioFixture
@inject IConfiguration _config
@inject ISnackbar _snackBar



@if (Partido != null)
{
    <div class="gridContainer">
        <div class="vis caja">
            <p>@((Partido.EquipoLocal == null || Partido.EquipoLocal.Id == 0) ? MensajeEsperandoContrincante() : Partido.EquipoLocal.Abreviatura)</p>
            <img src="@((Partido.EquipoLocal == null || Partido.EquipoLocal.Id == 0) ? EscudoVacio() : ActualizarLinkImagen(Partido.EquipoLocal.Logo))" alt="" class="imgLogosEquipos">
        </div>

        <div class="puntV caja tamanioPuntaje">
            <h3>@Partido.PuntajeLocal</h3>
        </div>

        <div class="medio caja">
            <p class="gridContainerFecha">10/01/2023</p>
            <p title="@Partido.HistorialSet">VS</p>
            <p>00:00</p>
            <p>@Partido.NombreCancha</p>
        </div>

        <div class="puntL caja tamanioPuntaje">
            <h3>@Partido.PuntajeVisitante</h3>
        </div>

        <div class="loc caja">
            <p>@((Partido.EquipoVisitante == null || Partido.EquipoVisitante.Id == 0) ? MensajeEsperandoContrincante() : Partido.EquipoVisitante.Abreviatura))</p>
            <img src="@((Partido.EquipoVisitante == null || Partido.EquipoVisitante.Id == 0) ?  EscudoVacio() : ActualizarLinkImagen(Partido.EquipoVisitante.Logo))" alt="" class="imgLogosEquipos">
        </div>


        @if (Partido.EstadoPartido == Util.EstadoPartido.EN_PROCESO.ToString())
        {
           <div class="sep caja">
            <hr>
        </div>

        <div class="marcV caja">
            <a href="#" @onclick="() => AumentarMarcador(Util.LOCAL)"
                        @onclick:preventDefault>
             <h2>@Partido.MarcadorLocal.ToString("00")</h2>
            </a>
                <MarcadorSetsGanados CantidadSetGanados="Partido.SetGanadosLocal" />
        </div>

        <div class="medioSet caja">
            <h4>SET: @Partido.SetActual</h4>
            <img src="/imagenes/jugando2.gif" alt="jugando"/>
        </div>

        <div class="marcL caja">
                <a href="#" @onclick="() => AumentarMarcador(Util.VISITANTE)"
                            @onclick:preventDefault>
                    <h2 >@Partido.MarcadorVisitante.ToString("00")</h2>
                </a>
                <MarcadorSetsGanados CantidadSetGanados="Partido.SetGanadosVisitante" />
        </div>

            <div class="pie">
                <p>@Partido.HistorialSet</p>
            </div>
            <EspacioVertical Altura="20px" />
        }
        @if (Partido.EquipoLocal != null && Partido.EquipoVisitante != null)
        {
            <div class="playPartido">
                <a href="" @onclick="ComenzarPartido" @onclick:preventDefault>
                    <img src="/imagenes/@ImagenPlay" alt="" class="imgPlay">
                </a>
            </div>
        }
       
    </div>

   <EspacioVertical Altura="15px" />

}






@code {
    [Parameter]
    public PartidoDTO Partido { get; set; }

    int SetsMax = 0; //extraer del servicio de torneo
    int PuntajeMax = 0;
    int PuntajeMaxDefinitorio = 0;
    int TorneoId = 0;

    [Parameter]
    public EventCallback<PartidoDTO> SiguientePartido { get; set; }

    private int setDiferencia = 0;
    private int puntajeMaximoSegunSet = 0;

    private bool EsconderIconoPlay = true;
    private bool ModalidadTantosPorDiferencia = false;

    private string ImagenPlay = "play.png";

    private DateTime HorarioInicioPartido;

    protected async override Task OnInitializedAsync()
    {
        await Iniciar();
    }

    private async Task Iniciar()
    {
        TorneoDTO torneoActual = _servicioTorneo.ObtenerTorneoActual();

        int SetsMax = torneoActual.SetsMax; 
        int PuntajeMax = torneoActual.PuntajeMax;
        int PuntajeMaxDefinitorio = torneoActual.PuntajeMaxUltimoSet;
        int TorneoId = torneoActual.Id;

        decimal mitadSetTotales = Math.Round(Convert.ToDecimal(SetsMax) / 2, 2);
        setDiferencia = (int)Math.Ceiling(mitadSetTotales);

        puntajeMaximoSegunSet = PuntajeMax;
        if (Partido.PuntajeLocal > 0 || Partido.PuntajeVisitante > 0) EsconderIconoPlay = true;
    }

    private string ActualizarLinkImagen(string imagenRef)
    {
        return $"{_config["UrlBaseParaImagenes"]}{imagenRef}";
    }

    private string EscudoVacio() => "/imagenes/escudovacio.png";

    private string MensajeEsperandoContrincante() => "Esperando...";

    private async Task ComenzarPartido()
    {
        if (Partido.EquipoLocal != null && Partido.EquipoVisitante != null &&
            Partido.EquipoLocal.Id > 0 && Partido.EquipoVisitante.Id > 0)
        {
            if (_servicioFixture.HayCanchaLibre())
            {
                Partido.EstadoPartido = Util.EstadoPartido.EN_PROCESO.ToString();
                EsconderIconoPlay = true;
                ImagenPlay = "pelota.png";
                Partido.Inicio = DateTime.Now;
            }
            else
            {
                _snackBar.Add("No hay canchas disopnibles aun", Severity.Info);
            }
        }
        else
        {
            _snackBar.Add("Todavia no hay dos equipos confirmados", Severity.Info);
        }
    }

    private async Task AumentarMarcador(string tipoEquipo)
    {
        if (tipoEquipo == "LOCAL")
        {
            Partido.MarcadorLocal += 1;
        }
        else
        {
            Partido.MarcadorVisitante += 1;
        }
        await VerificarFinalPorSet();
    }

    private async Task DecrementarMarcador(string tipoEquipo)
    {
        if (tipoEquipo == "LOCAL" && Partido.MarcadorLocal > 0)
        {
            Partido.MarcadorLocal -= 1;
        }
        else if (Partido.MarcadorVisitante > 0)
        {
            Partido.MarcadorVisitante -= 1;
        }
    }

    private async void ResetearMarcador()
    {
        Partido.HistorialSet += $"[{Partido.MarcadorLocal}-{Partido.MarcadorVisitante}]  ";
        Partido.MarcadorLocal = 0;
        Partido.MarcadorVisitante = 0;
        Partido.SetActual += 1;
        puntajeMaximoSegunSet = Partido.SetActual == SetsMax ? PuntajeMaxDefinitorio : PuntajeMax;
        ModalidadTantosPorDiferencia = false;
    }

    private async Task VerificarFinalPorSet()
    {

        if (Partido.MarcadorLocal == puntajeMaximoSegunSet -1 && Partido.MarcadorVisitante == puntajeMaximoSegunSet - 1)
        {
            ModalidadTantosPorDiferencia = true;
        }

        if (ModalidadTantosPorDiferencia)
        {
            int diferenciaTantosLocal = Partido.MarcadorLocal - Partido.MarcadorVisitante;
            int diferenciaTantosVisitante = Partido.MarcadorVisitante - Partido.MarcadorLocal;

            Partido.SetGanadosLocal = diferenciaTantosLocal == 2 ? Partido.SetGanadosLocal + 1 : Partido.SetGanadosLocal;
            Partido.SetGanadosVisitante = diferenciaTantosVisitante == 2 ? Partido.SetGanadosVisitante + 1 : Partido.SetGanadosVisitante;

            if (diferenciaTantosLocal == 2 || diferenciaTantosVisitante == 2)
            {
                ResetearMarcador();
                await VerificarFinalPartido();
            }
            return;
        }

        if (Partido.MarcadorLocal >= puntajeMaximoSegunSet)
        {
            Partido.SetGanadosLocal += 1;
            ResetearMarcador();
        }
        if (Partido.MarcadorVisitante >= puntajeMaximoSegunSet)
        {
            Partido.SetGanadosVisitante += 1;
            ResetearMarcador();
        }
        await VerificarFinalPartido();
    }

    private async Task VerificarFinalPartido()
    {

        if (Partido.SetGanadosLocal == setDiferencia)
        {
            Partido.PuntajeLocal = 2;
            Partido.PuntajeVisitante = 1;
            TerminarPartido();
            return;
        }

        if (Partido.SetGanadosVisitante == setDiferencia)
        {
            Partido.PuntajeLocal = 1;
            Partido.PuntajeVisitante = 2;
            TerminarPartido();
            return;
        }

        if (Partido.SetActual > SetsMax)
        {
            if (Partido.SetGanadosLocal > Partido.SetGanadosVisitante)
            {
                Partido.PuntajeLocal = 2;
                Partido.PuntajeVisitante = 1;
            }
            else
            {
                Partido.PuntajeVisitante = 1;
                Partido.PuntajeVisitante = 2;
            }
            TerminarPartido();
        }
    }

    private async void TerminarPartido()
    {
        Partido.EstadoPartido = Util.EstadoPartido.FINALIZADO.ToString();
        EsconderIconoPlay = false;
        Partido.Fin = DateTime.Now;
        await _servicioFixture.TerminoPartido(Partido);
    }

   


}
