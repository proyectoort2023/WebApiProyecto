
@inject ImagenServicio _imagenServicio
@inject IConfiguration _config

<section class="banner-registro">

    <div style="background-image: url('@UrlImagenLogo()')">
        @if (ModoEdicion)
        {
            <label for="file-upload-logo" class="custom-file-upload-logo"></label>
            <InputFile OnChange="@SubirArchivoLogo" accept="image/*" id="file-upload-logo" />
        }
       
    </div>

    <div style="background-image: url('@UrlImagenBanner()');">
        
    </div>
</section>

<div class="banner-upload">
    @if (ModoEdicion)
    {
        <label for="file-upload-banner" class="custom-file-upload-banner"></label>
        <InputFile OnChange="@SubirArchivoBanner" accept="image/*" id="file-upload-banner" />
    }

</div>


@code {
    [Parameter] public string NombreImagenBanner { get; set; }
    [Parameter] public string NombreImagenLogo { get; set; }
    [Parameter] public EventCallback<ImagenDTO> SubirImagen { get; set; }

    [Parameter] public bool ModoEdicion { get; set; }

    private ImagenDTO imagenUrl = new();
    private string baseUrlImagen;

    protected async override Task OnInitializedAsync()
    {
        baseUrlImagen = _config["UrlBaseParaImagenes"];
    }
    private async Task GuardarImagenCallBack()
    {
        await SubirImagen.InvokeAsync(imagenUrl);
    }

    private string UrlImagenLogo() =>   $"{baseUrlImagen}{NombreImagenLogo}";
    private string UrlImagenBanner() => $"{baseUrlImagen}{NombreImagenBanner}";

    private async Task SubirArchivoBanner(InputFileChangeEventArgs e)
    {
        try
        {
            if (!string.IsNullOrEmpty(NombreImagenBanner))
            {
                imagenUrl.UrlImagen = await _imagenServicio.ActualizarImagenFile(e, NombreImagenBanner);
            }
            else
            {
                imagenUrl.UrlImagen = await _imagenServicio.SubirImagenFile(e);
            }
            imagenUrl.TipoImagenSubida = Util.TipoImagen.BANNER.ToString();
            await GuardarImagenCallBack();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task SubirArchivoLogo(InputFileChangeEventArgs e)
    {
        try
        {
            if (!string.IsNullOrEmpty(NombreImagenLogo))
            {
                imagenUrl.UrlImagen = await _imagenServicio.ActualizarImagenFile(e, NombreImagenLogo);
            }
            else
            {
                imagenUrl.UrlImagen = await _imagenServicio.SubirImagenFile(e);
            }
            imagenUrl.TipoImagenSubida = Util.TipoImagen.LOGO.ToString();
            await GuardarImagenCallBack();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }



}
