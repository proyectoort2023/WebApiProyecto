@inject IConfiguration _config
@inject ISnackbar _snackBar
@inject UsuarioServicio _servicioUsuario
@inject FixtureServicio _servicioFixture
@inject TorneoServicio _servicioTorneo
@inject HubConnection _hubConnection


@if (PartidoActual != null)
{
    <div class="gridContainer @ColorActivo()">
        <div class="vis caja">
            <p>@((PartidoActual.EquipoLocal == null || PartidoActual.EquipoLocal.Id == 0) ? MensajeEsperandoContrincante() : PartidoActual.EquipoLocal.Abreviatura)</p>
            <img src="@((PartidoActual.EquipoLocal == null || PartidoActual.EquipoLocal.Id == 0) ? EscudoVacio() : ActualizarLinkImagen(PartidoActual.EquipoLocal.Logo))" alt="" class="imgLogosEquipos">
        </div>

        <div class="puntV caja tamanioPuntaje">
            <h3>@PartidoActual.PuntajeLocal</h3>
        </div>

        <div class="medio caja">
            <p class="gridContwainerFecha">@PartidoActual.Fecha.ToString("dd/MM/yyyy")</p>
            <p title="@PartidoActual.HistorialSet">VS</p>
            <p>@DuracionPartidoActual()</p>
            <p>@AdicionalInfoGrupo()</p>
            <p>@PartidoActual.NombreCancha</p>
        </div>

        <div class="puntL caja tamanioPuntaje">
            <h3>@PartidoActual.PuntajeVisitante</h3>
        </div>

        <div class="loc caja">
            <p>@((PartidoActual.EquipoVisitante == null || PartidoActual.EquipoVisitante.Id == 0) ? MensajeEsperandoContrincante() : PartidoActual.EquipoVisitante.Abreviatura)</p>
            <img src="@((PartidoActual.EquipoVisitante == null || PartidoActual.EquipoVisitante.Id == 0) ?  EscudoVacio() : ActualizarLinkImagen(PartidoActual.EquipoVisitante.Logo))" alt="" class="imgLogosEquipos">
        </div>


        @if (PartidoActual.EstadoPartido == Util.EstadoPartido.EN_PROCESO.ToString())
        {
            <div class="sep caja">
                <hr>
            </div>

            <div class="marcV caja">
                <a href="#" @onclick="() => AumentarMarcador(Util.LOCAL)"
                @ontouchstart="e => ComienzoToqueLargo(e, Util.LOCAL)"
                @ontouchend="FinToqueLargo"
                @onclick:preventDefault>
                    <h2>@PartidoActual.MarcadorLocal.ToString("00")</h2>
                </a>
                <MarcadorSetsGanados CantidadSetGanados="PartidoActual.SetGanadosLocal" />
            </div>

            <div class="medioSet caja">
                <h4>SET: @PartidoActual.SetActual</h4>
                <img src="/imagenes/jugando2.gif" alt="jugando" />
            </div>

            <div class="marcL caja">
                <a href="#" @onclick="() => AumentarMarcador(Util.VISITANTE)"
                @ontouchstart="e => ComienzoToqueLargo(e, Util.VISITANTE)"
                @ontouchend="FinToqueLargo"
                @onclick:preventDefault>
                    <h2>@PartidoActual.MarcadorVisitante.ToString("00")</h2>
                </a>
                <MarcadorSetsGanados CantidadSetGanados="PartidoActual.SetGanadosVisitante" />
            </div>

            <div class="pie">
                <p>@PartidoActual.HistorialSet</p>
            </div>
            <EspacioVertical Altura="20px" />
        }

       
            @if (PartidoActual.EquipoLocal != null && PartidoActual.EquipoVisitante != null && PartidoActual.EstadoPartido == Util.EstadoPartido.PENDIENTE.ToString())
            {

                <div class="playPartidoActual">
                    <a href="" @onclick="NotificarComienzoAEQuipos" @onclick:preventDefault>
                        <img src="/imagenes/@ImagenNotificar" alt="" class="imgPlay">
                    </a>

                    <EspacioVertical Altura="3px" />

                    <a href="" @onclick="ComenzarPartidoActual" @onclick:preventDefault>
                        <img src="/imagenes/@ImagenPlay" alt="" class="imgPlay">
                    </a>
                </div>
            }

    </div>

    <EspacioVertical Altura="35px" />

}






@code {
    [Parameter]
    public PartidoDTO PartidoActual { get; set; }

    int SetsMax = 0; //extraer del servicio de torneo
    int PuntajeMax = 0;
    int PuntajeMaxDefinitorio = 0;
    int TorneoId = 0;

    private bool esToqueLArgo = false;
    private Timer toqueLargoTimer;

    private int setDiferencia = 0;
    private int puntajeMaximoSegunSet = 0;

    private bool EsconderIconoPlay = true;

    private string ImagenPlay = "play.png";
    private string ImagenNotificar = "enviarPartidoActual.png";

    private DateTime HorarioInicioPartidoActual;

    private bool touchLargoCorriendo = false;

    int idUsuario = 0;
    bool existenciaAutorizacion = false;


    protected async override Task OnInitializedAsync()
    {
        await Iniciar();
    }

    private async Task Iniciar()
    {

        TorneoDTO torneoActual = _servicioTorneo.ObtenerTorneoActual();

        int SetsMax = torneoActual.SetsMax;
        int PuntajeMax = torneoActual.PuntajeMax;
        int PuntajeMaxDefinitorio = torneoActual.PuntajeMaxUltimoSet;
        int TorneoId = torneoActual.Id;

        decimal mitadSetTotales = Math.Round(Convert.ToDecimal(SetsMax) / 2, 2);
        setDiferencia = (int)Math.Ceiling(mitadSetTotales);

        puntajeMaximoSegunSet = PuntajeMax;
        if (PartidoActual.PuntajeLocal > 0 || PartidoActual.PuntajeVisitante > 0) EsconderIconoPlay = true;

        idUsuario = _servicioUsuario.ObtenerUsuarioLogueado().Id;
        //existenciaAutorizacion = await _servicioAutorizacionPlanillero.ExistenciaAutorizacionPlanillero(_servicioTorneo.ObtenerTorneoActual().Id, idUsuario);


    }

    private string ActualizarLinkImagen(string imagenRef)
    {
        return $"{_config["UrlBaseParaImagenes"]}{imagenRef}";
    }

    private string ColorActivo() => PartidoActual.EstadoPartido == Util.EstadoPartido.EN_PROCESO.ToString() ? "color-PartidoActual-activo" : "";

    private string EscudoVacio() => "/imagenes/escudovacio.png";

    private string MensajeEsperandoContrincante() => "Esperando...";

    private async Task ComenzarPartidoActual()
    {
        if (PartidoActual.EquipoLocal != null && PartidoActual.EquipoVisitante != null &&
            PartidoActual.EquipoLocal.Id > 0 && PartidoActual.EquipoVisitante.Id > 0)
        {
            if (_servicioFixture.HayCanchaLibre())
            {
                PartidoActual.EstadoPartido = Util.EstadoPartido.EN_PROCESO.ToString();
                EsconderIconoPlay = true;
                PartidoActual.Inicio = DateTime.Now;
                await _hubConnection.SendAsync("EnviarActualizarPartidos", new List<PartidoDTO>() { PartidoActual });
            }
            else
            {
                _snackBar.Add("No hay canchas disopnibles aun", Severity.Info);
            }
        }
        else
        {
            _snackBar.Add("Todavia no hay dos equipos confirmados", Severity.Info);
        }
       // await ActualizarPartidoActualsTiempoReal();
    }

    private async Task AumentarMarcador(string tipoEquipo)
    {
            if (!esToqueLArgo)
            {

                if (tipoEquipo == "LOCAL")
                {
                    PartidoActual.MarcadorLocal += 1;
                }
                else
                {
                    PartidoActual.MarcadorVisitante += 1;
                }
                //bool finalSet = await VerificarFinalSet();


                //if (finalSet)
                //{
                //    PartidoActual.SetGanadosLocal = PartidoActual.MarcadorLocal > PartidoActual.MarcadorVisitante ? PartidoActual.SetGanadosLocal + 1 : PartidoActual.SetGanadosLocal;
                //    PartidoActual.SetGanadosVisitante = PartidoActual.MarcadorVisitante > PartidoActual.MarcadorLocal ? PartidoActual.SetGanadosVisitante + 1 : PartidoActual.SetGanadosVisitante;
                //    await ResetearMarcador();
                //}

                //bool finalPartidoActual = await VerificarFinalPartidoActual();
                //if (finalPartidoActual)
                //{
                //    await TerminarPartidoActual();

                //}
                //else
                //{
                //    await ActualizarPartidoActualsTiempoReal();
                //}
            }
    }

    private async Task<bool> VerificarFinalSet()
    {
        if (PartidoActual.MarcadorLocal >= puntajeMaximoSegunSet - 1 && PartidoActual.MarcadorVisitante >= puntajeMaximoSegunSet - 1)
        {
            if (Math.Abs(PartidoActual.MarcadorLocal - PartidoActual.MarcadorVisitante) == 2) return true;
        }
        else
        {
            if (PartidoActual.MarcadorLocal >= puntajeMaximoSegunSet || PartidoActual.MarcadorVisitante >= puntajeMaximoSegunSet) return true;
        }
        return false;
    }



    private async Task DecrementarMarcador(string tipoEquipo)
    {
        if (existenciaAutorizacion && _servicioUsuario.ObtenerUsuarioLogueado().Rol == Util.Roles.PLANILLERO.ToString())
        {
            if (tipoEquipo == "LOCAL" && PartidoActual.MarcadorLocal > 0)
            {
                PartidoActual.MarcadorLocal -= 1;
            }
            else if (PartidoActual.MarcadorVisitante > 0)
            {
                PartidoActual.MarcadorVisitante -= 1;
            }
            await ActualizarPartidoActualsTiempoReal();
        }
    }

    private async Task ResetearMarcador()
    {
        PartidoActual.HistorialSet += $"[{PartidoActual.MarcadorLocal}-{PartidoActual.MarcadorVisitante}]  ";
        PartidoActual.MarcadorLocal = 0;
        PartidoActual.MarcadorVisitante = 0;
        PartidoActual.SetActual += 1;
        puntajeMaximoSegunSet = PartidoActual.SetActual == SetsMax ? PuntajeMaxDefinitorio : PuntajeMax;  //resolver esto para tiempo real
    }

    private async Task<bool> VerificarFinalPartidoActual()
    {
        if (PartidoActual.SetActual > SetsMax || PartidoActual.SetGanadosLocal == setDiferencia || PartidoActual.SetGanadosVisitante == setDiferencia) return true;

        return false;
    }

    private async Task TerminarPartidoActual()
    {
        PartidoActual.PuntajeLocal = PartidoActual.SetGanadosLocal > PartidoActual.SetGanadosVisitante ? 2 : 1;
        PartidoActual.PuntajeVisitante = PartidoActual.SetGanadosVisitante > PartidoActual.SetGanadosLocal ? 2 : 1;
        PartidoActual.EstadoPartido = Util.EstadoPartido.FINALIZADO.ToString();
        EsconderIconoPlay = false;
        PartidoActual.Fin = DateTime.Now;
        var Partidos = await _servicioFixture.TerminoPartido(PartidoActual);

        if (await _servicioFixture.ActualizarPartidoTorneo(PartidoActual))
        {
            _snackBar.Add("PartidoActual finalizado y actualizado", Severity.Success);
        }

        await ActualizarPartidoActualsTermino(Partidos);
    }

    private async Task ActualizarPartidoActualsTiempoReal()
    {
        await _servicioFixture.ActualizacionPartidosTiempoReal(new List<PartidoDTO>(){PartidoActual});
    }

    private async Task ActualizarPartidoActualsTermino(List<PartidoDTO> Partidos)
    {
        if (Partidos.Count > 0) await _servicioFixture.ActualizacionPartidosTiempoReal(Partidos);

        await ActualizarPartidoActualsTiempoReal();
    }

    private string DuracionPartidoActual()
    {
        if (PartidoActual.Inicio != DateTime.MinValue && PartidoActual.Fin != DateTime.MinValue)
        {
            return $"{Util.TiempoEnMinutos(PartidoActual.Inicio, PartidoActual.Fin)}:00";
        }
        return "00:00";
    }

    private string AdicionalInfoGrupo()
    {
        if (!string.IsNullOrEmpty(PartidoActual.Grupo))
        {
            return $"Grupo:{PartidoActual.Grupo}";
        }
        return "";
    }



    private async Task ComienzoToqueLargo(TouchEventArgs e, string tipoEquipo)
    {
        esToqueLArgo = true;
        toqueLargoTimer = new Timer(EjecucionDecrementador, tipoEquipo, 500, Timeout.Infinite);
    }

    private void FinToqueLargo()
    {
        toqueLargoTimer?.Dispose();
        esToqueLArgo = false;
        StateHasChanged();
    }

    private void EjecucionDecrementador(object state)
    {
        string tipoEquipo = state.ToString();

        StateHasChanged();
        DecrementarMarcador(tipoEquipo).Wait();

        toqueLargoTimer?.Dispose();
        esToqueLArgo = false;
    }



    private async Task NotificarComienzoAEQuipos()
    {
        //if (PartidoActual.EquipoLocal != null && PartidoActual.EquipoVisitante != null &&
        //   PartidoActual.EquipoLocal.Id > 0 && PartidoActual.EquipoVisitante.Id > 0)
        //{
        //    if (_servicioFixture.HayCanchaLibre())
        //    {
        //        bool notificacionsoloAEquipo = false;
        //        string mensaje = "Presentarse a jugar en cancha";
        //        bool notificadoLocal = await _servicioNotificacion.RegistrarNotificacion(mensaje, PartidoActual.EquipoLocal, _servicioTorneo.ObtenerTorneoActual(), notificacionsoloAEquipo);
        //        bool notificadoVisitante = await _servicioNotificacion.RegistrarNotificacion(mensaje, PartidoActual.EquipoVisitante, _servicioTorneo.ObtenerTorneoActual(), notificacionsoloAEquipo);

        //        if (notificadoLocal && notificadoVisitante)
        //        {
        //            _snackBar.Add("Equipos notificados", Severity.Success);
        //        }
        //    }
        //    else
        //    {
        //        _snackBar.Add("No hay canchas disopnibles aun", Severity.Info);
        //    }
        //}
        //else
        //{
        //    _snackBar.Add("Todavia no hay dos equipos confirmados", Severity.Info);
        //}
    }


}
